@model List<Ecommerce.Models.CartItem>
@{
    ViewData["Title"] = "Keranjang Belanja";
    decimal total = 0; // Total masih dihitung untuk semua item di view
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h1 class="mb-4">
                <i class="fas fa-shopping-cart text-primary"></i>
                Keranjang Belanja Anda
            </h1>

            @if (Model == null || !Model.Any())
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-shopping-cart fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">Keranjang Belanja Kosong</h4>
                        <p class="text-muted mb-4">Anda belum menambahkan produk apapun ke keranjang belanja.</p>
                        <a asp-controller="Home" asp-action="Index" class="btn btn-primary btn-lg">
                            <i class="fas fa-shopping-bag me-2"></i>
                            Mulai Berbelanja
                        </a>
                    </div>
                </div>
            }
            else
            {
                @* Form untuk proses checkout item yang dipilih *@
                <form id="checkoutForm" asp-controller="Checkout" asp-action="ProcessSelectedItems" method="post">
                    @* Hidden input untuk menyimpan ID item keranjang yang dipilih *@
                    <input type="hidden" name="selectedCartItemIds" id="selectedCartItemIds" value="" />

                    <div class="card shadow-sm">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="bg-light">
                                        <tr>
                                            <th class="border-0 py-3 ps-4">
                                                <input type="checkbox" id="selectAllItems" />
                                            </th> @* Kolom Checkbox *@
                                            <th class="border-0 py-3 ps-4">Produk</th>
                                            <th class="border-0 py-3 text-center">Harga Satuan</th>
                                            <th class="border-0 py-3 text-center">Jumlah</th>
                                            <th class="border-0 py-3 text-center">Subtotal</th>
                                            <th class="border-0 py-3 text-center">Aksi</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model)
                                        {
                                            var subtotal = item.Product.Price * item.Quantity;
                                            total += subtotal;
                                            <tr class="cart-item">
                                                <td class="align-middle py-4 ps-4">
                                                    <input type="checkbox" class="item-checkbox" value="@item.Id" />
                                                </td> @* Checkbox per item *@
                                                <td class="align-middle py-4 ps-4">
                                                    <div class="d-flex align-items-center">
                                                        @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                                                        {
                                                            <img src="@item.Product.ImageUrl"
                                                                 alt="@item.Product.Name"
                                                                 class="rounded me-3"
                                                                 style="width: 80px; height: 80px; object-fit: cover;" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-light rounded me-3 d-flex align-items-center justify-content-center"
                                                                 style="width: 80px; height: 80px;">
                                                                <i class="fas fa-image text-muted"></i>
                                                            </div>
                                                        }
                                                        <div>
                                                            <h6 class="mb-1">
                                                                <a asp-controller="Product" asp-action="Details" asp-route-id="@item.ProductId"
                                                                   class="text-decoration-none text-dark fw-bold">
                                                                    @item.Product.Name
                                                                </a>
                                                            </h6>
                                                            <small class="text-muted">SKU: @item.ProductId</small>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <span class="fw-semibold">Rp @item.Product.Price.ToString("N0")</span>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <form asp-controller="Cart" asp-action="UpdateQuantity" method="post" class="d-inline-block">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="cartItemId" value="@item.Id" />
                                                        <div class="input-group" style="width: 120px; margin: 0 auto;">
                                                            <button type="button" class="btn btn-outline-secondary btn-sm decrease-qty" data-cart-id="@item.Id">
                                                                <i class="fas fa-minus"></i>
                                                            </button>
                                                            <input type="number" name="quantity" value="@item.Quantity" min="1" max="99"
                                                                   class="form-control form-control-sm text-center quantity-input"
                                                                   data-cart-id="@item.Id" />
                                                            <button type="button" class="btn btn-outline-secondary btn-sm increase-qty" data-cart-id="@item.Id">
                                                                <i class="fas fa-plus"></i>
                                                            </button>
                                                        </div>
                                                        @* Tombol update ini akan disembunyikan atau diubah fungsinya jika menggunakan AJAX *@
                                                        <button type="submit" class="btn btn-link btn-sm text-primary mt-1" style="font-size: 0.8rem;">
                                                             <i class="fas fa-sync-alt"></i> Update
                                                         </button>
                                                    </form>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <span class="fw-bold text-primary">Rp @subtotal.ToString("N0")</span>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <form asp-controller="Cart" asp-action="RemoveItem" method="post" class="d-inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="cartItemId" value="@item.Id" />
                                                        <button type="submit" class="btn btn-outline-danger btn-sm"
                                                                onclick="return confirm('Apakah Anda yakin ingin menghapus item ini dari keranjang?')">
                                                            <i class="fas fa-trash-alt"></i>
                                                        </button>
                                                    </form>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-md-8">
                            <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Lanjutkan Belanja
                            </a>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="mb-0">
                                        <i class="fas fa-calculator me-2"></i>
                                        Ringkasan Belanja
                                    </h5>
                                </div>
                                <div class="card-body">
                                    @* Total di sini masih total semua item *@
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Subtotal (@Model.Count() item@(Model.Count() > 1 ? "s" : "")):</span>
                                        <span>Rp @total.ToString("N0")</span>
                                    </div>
                                     <div class="d-flex justify-content-between mb-2">
                                        <span>Estimasi Ongkir:</span>
                                        <span class="text-muted">Akan dihitung di checkout</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between mb-3">
                                        <strong>Total:</strong>
                                        <strong class="text-primary fs-5">Rp @total.ToString("N0")</strong>
                                    </div>
                                    <div class="d-grid">
                                        @* Tombol Checkout sekarang submit form *@
                                        <button type="submit" class="btn btn-success btn-lg" id="checkoutButton">
                                            <i class="fas fa-credit-card me-2"></i>
                                            Checkout Item Dipilih
                                        </button>
                                    </div>
                                    <div class="text-center mt-3">
                                        <small class="text-muted">
                                            <i class="fas fa-shield-alt me-1"></i>
                                            Transaksi aman & terpercaya
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form> @* Akhir form checkout *@
            }
        </div>
    </div>
</div>

<style>
    .cart-item:hover {
        background-color: #f8f9fa;
    }

    .quantity-input {
        -moz-appearance: textfield;
    }

    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .btn-outline-secondary:hover {
        color: #495057;
        background-color: #f8f9fa;
        border-color: #f8f9fa;
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const selectAllCheckbox = document.getElementById('selectAllItems');
            const itemCheckboxes = document.querySelectorAll('.item-checkbox');
            const selectedItemsInput = document.getElementById('selectedCartItemIds');
            const checkoutForm = document.getElementById('checkoutForm');
            const checkoutButton = document.getElementById('checkoutButton');

            // Function to update the hidden input value based on selected checkboxes
            function updateSelectedItemsInput() {
                const selectedIds = [];
                itemCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedIds.push(checkbox.value);
                    }
                });
                // Store IDs as a comma-separated string (or JSON, depending on how you want to receive it in the controller)
                selectedItemsInput.value = selectedIds.join(',');

                // Enable/disable checkout button based on selection
                checkoutButton.disabled = selectedIds.length === 0;
            }

            // Initial update on page load
            updateSelectedItemsInput();

            // Event listener for "Select All" checkbox
            if (selectAllCheckbox) {
                 selectAllCheckbox.addEventListener('change', function() {
                     itemCheckboxes.forEach(checkbox => {
                         checkbox.checked = selectAllCheckbox.checked;
                     });
                     updateSelectedItemsInput(); // Update hidden input after selecting/deselecting all
                 });
            }


            // Event listeners for individual item checkboxes
            itemCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    // If any item checkbox is unchecked, uncheck "Select All"
                    if (!this.checked && selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                    }
                    // If all item checkboxes are checked, check "Select All"
                    if (selectAllCheckbox && Array.from(itemCheckboxes).every(cb => cb.checked)) {
                         selectAllCheckbox.checked = true;
                    }
                    updateSelectedItemsInput(); // Update hidden input after individual change
                });
            });


            // Quantity increase/decrease functionality (existing code)
            document.querySelectorAll('.increase-qty').forEach(button => {
                button.addEventListener('click', function() {
                    const cartId = this.getAttribute('data-cart-id');
                    const input = document.querySelector(`input[data-cart-id="${cartId}"]`);
                    const currentValue = parseInt(input.value);
                    const maxValue = parseInt(input.getAttribute('max'));

                    if (currentValue < maxValue) {
                        input.value = currentValue + 1;
                        // Optional: Auto-submit the form after quantity change
                        this.closest('form').submit();
                    }
                });
            });

            document.querySelectorAll('.decrease-qty').forEach(button => {
                button.addEventListener('click', function() {
                    const cartId = this.getAttribute('data-cart-id');
                    const input = document.querySelector(`input[data-cart-id="${cartId}"]`);
                    const currentValue = parseInt(input.value);
                    const minValue = parseInt(input.getAttribute('min'));

                    if (currentValue > minValue) {
                        input.value = currentValue - 1;
                         // Optional: Auto-submit the form after quantity change
                        this.closest('form').submit();
                    } else if (currentValue === minValue) {
                         // Jika quantity sudah minimal (1), klik tombol decrease lagi bisa memicu hapus?
                         // Atau biarkan saja quantity tetap 1.
                         // Untuk saat ini, biarkan quantity tetap 1 jika sudah minimal.
                         // Jika Anda ingin menghapus item saat quantity jadi 0, Anda perlu logika AJAX/form terpisah
                         // atau modifikasi action UpdateQuantity di controller untuk handle quantity 0.
                    }
                });
            });

            // Auto-submit form when quantity changes (modified to use change event or manual submit)
            // Removed the setTimeout auto-submit on 'input' for simplicity and to avoid too many requests.
            // The Update button or the increase/decrease buttons (if uncommented submit) will handle submission.
             document.querySelectorAll('.quantity-input').forEach(input => {
                 // Optional: Add a change listener if you want to submit when the input field loses focus after changing value
                 input.addEventListener('change', function() {
                      this.closest('form').submit();
                 });
             });


             // Prevent form submission if no items are selected
             if (checkoutForm) {
                 checkoutForm.addEventListener('submit', function(event) {
                     updateSelectedItemsInput(); // Pastikan input terupdate sebelum submit
                     const selectedIds = selectedItemsInput.value.split(',').filter(id => id); // Filter empty strings
                     if (selectedIds.length === 0) {
                         alert('Pilih setidaknya satu item untuk checkout.');
                         event.preventDefault(); // Batalkan submit form
                     }
                 });
             }

        });
    </script>
}
